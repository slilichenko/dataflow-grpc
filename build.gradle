plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 5.6 OR HIGHER. Use plugin version 0.8.10 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.18'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}


repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/"
    }
    mavenCentral()
    mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}


def grpcVersion = '1.43.2' // CURRENT_GRPC_VERSION
def protobufVersion = '3.19.2'
def protocVersion = protobufVersion
def dataflowBeamVersion = '2.35.0'

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation group: 'org.apache.beam', name: 'beam-sdks-java-core', version: dataflowBeamVersion
    implementation(group: 'org.apache.beam', name: 'beam-runners-google-cloud-dataflow-java', version: dataflowBeamVersion) {
        exclude group: 'io.confluent', module: 'kafka-schema-registry-client'
        exclude group: 'io.confluent', module: 'kafka-avro-serializer'
    }
    implementation group: 'org.apache.beam', name: 'beam-runners-direct-java', version: dataflowBeamVersion
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.12.2'
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.5'
    implementation "com.google.auto.value:auto-value-annotations:1.7.4"
    implementation "com.google.apis:google-api-services-dataflow:v1b3-rev20210825-1.32.1"
    annotationProcessor "com.google.auto.value:auto-value:1.7.4"
    testImplementation group: 'org.apache.beam', name: 'beam-runners-direct-java', version: dataflowBeamVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testImplementation 'junit:junit:4.13.2'

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task routeGuideServer(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.routeguide.RouteGuideServer'
    applicationName = 'route-guide-server'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task routeGuideClient(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.routeguide.RouteGuideClient'
    applicationName = 'route-guide-client'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task helloWorldServer(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.helloworld.HelloWorldServer'
    applicationName = 'hello-world-server'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task helloWorldClient(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.helloworld.HelloWorldClient'
    applicationName = 'hello-world-client'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task retryingHelloWorldServer(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.retrying.RetryingHelloWorldServer'
    applicationName = 'retrying-hello-world-server'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task retryingHelloWorldClient(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.retrying.RetryingHelloWorldClient'
    applicationName = 'retrying-hello-world-client'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task hedgingHelloWorldServer(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.hedging.HedgingHelloWorldServer'
    applicationName = 'hedging-hello-world-server'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task hedgingHelloWorldClient(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.hedging.HedgingHelloWorldClient'
    applicationName = 'hedging-hello-world-client'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task compressingHelloWorldClient(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.experimental.CompressingHelloWorldClient'
    applicationName = 'compressing-hello-world-client'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task manualFlowControlClient(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.manualflowcontrol.ManualFlowControlClient'
    applicationName = 'manual-flow-control-client'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

task manualFlowControlServer(type: CreateStartScripts) {
    mainClass = 'io.grpc.examples.manualflowcontrol.ManualFlowControlServer'
    applicationName = 'manual-flow-control-server'
    outputDir = new File(project.buildDir, 'tmp/scripts/' + name)
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(routeGuideServer)
    from(routeGuideClient)
    from(helloWorldServer)
    from(helloWorldClient)
    from(hedgingHelloWorldClient)
    from(hedgingHelloWorldServer)
    from(retryingHelloWorldClient)
    from(retryingHelloWorldServer)
    from(compressingHelloWorldClient)
    from(manualFlowControlClient)
    from(manualFlowControlServer)
    fileMode = 0755
}
